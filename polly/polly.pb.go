// Code generated by protoc-gen-go. DO NOT EDIT.
// source: polly.proto

/*
Package polly is a generated protocol buffer package.

It is generated from these files:
	polly.proto

It has these top-level messages:
	Poll
	Action
	Polls
	UpdatePoll
	Response
	Empty
*/
package polly

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Poll struct {
	PollName string `protobuf:"bytes,1,opt,name=poll_name,json=pollName" json:"poll_name,omitempty"`
}

func (m *Poll) Reset()                    { *m = Poll{} }
func (m *Poll) String() string            { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()               {}
func (*Poll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Poll) GetPollName() string {
	if m != nil {
		return m.PollName
	}
	return ""
}

type Action struct {
	PollAction string `protobuf:"bytes,1,opt,name=poll_action,json=pollAction" json:"poll_action,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Action) GetPollAction() string {
	if m != nil {
		return m.PollAction
	}
	return ""
}

type Polls struct {
	Polls string `protobuf:"bytes,1,opt,name=polls" json:"polls,omitempty"`
}

func (m *Polls) Reset()                    { *m = Polls{} }
func (m *Polls) String() string            { return proto.CompactTextString(m) }
func (*Polls) ProtoMessage()               {}
func (*Polls) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Polls) GetPolls() string {
	if m != nil {
		return m.Polls
	}
	return ""
}

type UpdatePoll struct {
	PollName   string `protobuf:"bytes,1,opt,name=poll_name,json=pollName" json:"poll_name,omitempty"`
	PollAction string `protobuf:"bytes,2,opt,name=poll_action,json=pollAction" json:"poll_action,omitempty"`
}

func (m *UpdatePoll) Reset()                    { *m = UpdatePoll{} }
func (m *UpdatePoll) String() string            { return proto.CompactTextString(m) }
func (*UpdatePoll) ProtoMessage()               {}
func (*UpdatePoll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdatePoll) GetPollName() string {
	if m != nil {
		return m.PollName
	}
	return ""
}

func (m *UpdatePoll) GetPollAction() string {
	if m != nil {
		return m.PollAction
	}
	return ""
}

type Response struct {
	Done bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Response) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Poll)(nil), "polly.Poll")
	proto.RegisterType((*Action)(nil), "polly.Action")
	proto.RegisterType((*Polls)(nil), "polly.Polls")
	proto.RegisterType((*UpdatePoll)(nil), "polly.UpdatePoll")
	proto.RegisterType((*Response)(nil), "polly.Response")
	proto.RegisterType((*Empty)(nil), "polly.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Polly service

type PollyClient interface {
	AddPoll(ctx context.Context, in *Poll, opts ...grpc.CallOption) (*Response, error)
	UpdatePoll(ctx context.Context, in *UpdatePoll, opts ...grpc.CallOption) (*Response, error)
	ListPolls(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Polls, error)
}

type pollyClient struct {
	cc *grpc.ClientConn
}

func NewPollyClient(cc *grpc.ClientConn) PollyClient {
	return &pollyClient{cc}
}

func (c *pollyClient) AddPoll(ctx context.Context, in *Poll, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/polly.Polly/add_poll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollyClient) UpdatePoll(ctx context.Context, in *UpdatePoll, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/polly.Polly/update_poll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollyClient) ListPolls(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Polls, error) {
	out := new(Polls)
	err := grpc.Invoke(ctx, "/polly.Polly/list_polls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Polly service

type PollyServer interface {
	AddPoll(context.Context, *Poll) (*Response, error)
	UpdatePoll(context.Context, *UpdatePoll) (*Response, error)
	ListPolls(context.Context, *Empty) (*Polls, error)
}

func RegisterPollyServer(s *grpc.Server, srv PollyServer) {
	s.RegisterService(&_Polly_serviceDesc, srv)
}

func _Polly_AddPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Poll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollyServer).AddPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polly.Polly/AddPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollyServer).AddPoll(ctx, req.(*Poll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polly_UpdatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollyServer).UpdatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polly.Polly/UpdatePoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollyServer).UpdatePoll(ctx, req.(*UpdatePoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polly_ListPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollyServer).ListPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polly.Polly/ListPolls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollyServer).ListPolls(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Polly_serviceDesc = grpc.ServiceDesc{
	ServiceName: "polly.Polly",
	HandlerType: (*PollyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_poll",
			Handler:    _Polly_AddPoll_Handler,
		},
		{
			MethodName: "update_poll",
			Handler:    _Polly_UpdatePoll_Handler,
		},
		{
			MethodName: "list_polls",
			Handler:    _Polly_ListPolls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polly.proto",
}

func init() { proto.RegisterFile("polly.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3f, 0x4b, 0x04, 0x31,
	0x14, 0xc4, 0x6f, 0xe5, 0xf6, 0xdc, 0x9b, 0x3d, 0x10, 0x1f, 0x16, 0x72, 0xe2, 0x1f, 0x62, 0xa3,
	0x57, 0x5c, 0xe1, 0x7d, 0x02, 0x0b, 0x1b, 0x0b, 0x91, 0x05, 0xeb, 0x25, 0x9a, 0x14, 0x0b, 0xd9,
	0x24, 0x98, 0x58, 0xec, 0xf7, 0xf0, 0x03, 0x4b, 0x5e, 0x22, 0x8a, 0x0a, 0x76, 0x99, 0x97, 0xdf,
	0x9b, 0x19, 0x12, 0xb4, 0xde, 0x19, 0x33, 0x6d, 0xfd, 0xab, 0x8b, 0x8e, 0x6a, 0x16, 0xe2, 0x12,
	0xf3, 0x47, 0x67, 0x0c, 0x9d, 0x60, 0x99, 0x06, 0xbd, 0x95, 0xa3, 0x3e, 0xae, 0x2e, 0xaa, 0xab,
	0x65, 0xd7, 0xa4, 0xc1, 0x83, 0x1c, 0xb5, 0xb8, 0xc6, 0xe2, 0xf6, 0x25, 0x0e, 0xce, 0xd2, 0x79,
	0x36, 0xe9, 0x25, 0xcb, 0x02, 0x22, 0x8d, 0x32, 0x20, 0x4e, 0x51, 0x27, 0xbf, 0x40, 0x47, 0xe0,
	0x84, 0x50, 0x98, 0x2c, 0xc4, 0x3d, 0xf0, 0xe4, 0x95, 0x8c, 0xfa, 0xdf, 0xd0, 0x9f, 0x51, 0x7b,
	0xbf, 0xa2, 0xce, 0xd0, 0x74, 0x3a, 0x78, 0x67, 0x83, 0x26, 0xc2, 0x5c, 0x39, 0x9b, 0x4d, 0x9a,
	0x8e, 0xcf, 0x62, 0x1f, 0xf5, 0xdd, 0xe8, 0xe3, 0x74, 0xf3, 0x5e, 0xe5, 0x52, 0x13, 0x6d, 0xd0,
	0x48, 0xa5, 0xfa, 0x64, 0x42, 0xed, 0x36, 0x3f, 0x47, 0xba, 0x59, 0x1f, 0x14, 0xf1, 0x69, 0x28,
	0x66, 0xb4, 0x43, 0xfb, 0xc6, 0x55, 0x33, 0x7e, 0x58, 0x88, 0xaf, 0xfa, 0x7f, 0x2d, 0x6d, 0x00,
	0x33, 0x84, 0xc8, 0x2b, 0x81, 0x56, 0x05, 0xe0, 0x1a, 0xeb, 0xd5, 0xb7, 0xc0, 0x20, 0x66, 0xcf,
	0x0b, 0xfe, 0x88, 0xdd, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x18, 0x23, 0xcd, 0x97, 0x01,
	0x00, 0x00,
}
